CLIENT CODE:

import socket

HOST = '192.168.0.101'
PORT = 12345 

# Create a TCP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect to the server
client_socket.connect((HOST, PORT))
#client_socket.sendall("encyrption key is 5".encode())
#received_key = client_socket.recv(1024)
#print(received_key.decode())
a = int(input("Enter a : "))
b = int(input("Enter b : "))
x = int(input("Enter x : "))
public_key = (a**x)%b
client_socket.sendall(f"{public_key}".encode())
received_key = int(client_socket.recv(1024).decode())
private_key = (received_key**x)%b
print("shared key is", private_key)

print(f"Connected to {HOST}:{PORT}")

# Send and receive data in a loop
while True:
    # Send data to the server
    message = input("Enter message to send (type 'exit' to quit): ")
    if message.lower() == 'exit':
        break
    client_socket.sendall(message.encode())

    # Receive response from the server
    response = client_socket.recv(1024)
    print("Received response:", response.decode())

# Close the client socket
client_socket.close()

SERVER CODE::


import socket

HOST = '0.0.0.0'  # Listen on all available network interfaces
PORT = 12345  # Choose a port number (make sure it's not already in use)

# Create a TCP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the host and port
server_socket.bind((HOST, PORT))

# Listen for incoming connections
server_socket.listen()

# Accept incoming connections in a loop
while True:
    # Accept incoming connections
    client_socket, client_address = server_socket.accept()
    
    print(f"Connection from {client_address}")

    print(f"Server listening on {HOST}:{PORT}")
    a = int(input("Enter a : "))
    b = int(input("Enter b : "))
    x = int(input("Enter x : "))
    public_key = (a**x)%b
    client_socket.sendall(f"{public_key}".encode())
    received_key = int(client_socket.recv(1024).decode())
    shared_key = (received_key**x)%b
    print("Shared key : ", shared_key)

    # Receive data from the client
    while True:
        data = client_socket.recv(1024)
        if not data:
            # If no more data is received, break the loop
            client_socket.close()
            server_socket.close()
            break
        print(f"Received data from {client_address}: {data.decode()}")
        
        # You can add your processing logic here
        
        # Echo the received data back to the client
        client_socket.sendall(data)
    # Close the client socket
    client_socket.close()
